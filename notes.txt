// More information will be provided in the very near future.

==== Survival Ark ====
Surface:

    Enemies:
        Bears, wolves, 

    Food:
        Berries, various crops, livestock.

=== Metallurgy Ark ===

=== Technology Ark ===

== Metaphysical Ark ==


Technical Details:

==== NBT-like data structure ====

A spatial access grid is defined here as a substitute for a hashmap.

uint32_t *spatial_access_grid;
int32_t grid_x, grid_y;
int32_t grid_w, grid_l;

Let's allow every chunk to have its own internal buffer to keep track of chunks:

uint32_t **metadata_spatial_access_grid; // This is the same size in bytes as the other spatial access grid.

Each element corresponds to a pointer to a list of instances of NBT-like hierarchies.
All chunks will also have a grid that points to the individual NBT-like instances defined as follows:

uint32_t *metadata_offsets;

These offsets will be added to the addresses defined in metadata_spatial_access_grid to access the NBT-like objects.

uint32_t *nbt_structure = metadata_spatial_access_grid[<convert chunk position to index>] + (void*)chunk_metadata_offsets[(y & CHUNK_MASK) * CHUNK_SIZE + (x & CHUNK_MASK)];

The structure of a single nbt_structure is the following:

[payload_size, descriptor, info_payload_size (if descriptor_byte permits), <info>, descriptor, info_payload_size (if descriptor_byte permits), <info>, ...]

Static values such as single integers that take the place of <info> do not require a payload size,
and can instead be determined using a lookup table. 
EVERYTHING in this array must be 32-bit for alignment reasons.
Also an item cannot occupy the 0th ID as it is required for this tree to work.

*qwords refers to a 32-bit section in memory


Example: An item with 1241 durability:

[
    0x00000002, // The number of qwords following this value.
    0x00000001, // Durability byte descriptor: does not need a payload value
    0x000004D9, // This item has 1241 (0x4D9) durability
]

Example: an item with an inventory with 3 slots, the second of which containing 47 of an item of ID: 12 with a durability of 87:

[
    0x00000026, // Item payload size is 11 qwords.
    0x00000003, // Inventory byte descriptor: needs a payload size
    0x00000006, // Inventory payload size of 6 qwords (Include only the items themselves! Not the NBT associated with them.)

    0x00000000, // Item slot 0
    0x00000000, // Slot 0 metadata byte offset - an offset of 0 means that there is no additional data.

    0x000C002F, // Item slot 1 (ID 12 (0x000C), Quantity of 47 (0x002F))
    0x00000003, // Slot 1 metadata byte offset (Metadata is found by adding 3 to the current search index)

    0x00000000, // Item slot 2
    0x00000000, // Slot 2 metadata byte offset

    0x00000002, // Slot 1 metadata payload size in qwords
    0x00000001, // Durability byte descriptor: no payload size
    0x00000057  // Durability of 87 (0x57)
]